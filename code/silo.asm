; DEV. BOARD: 	STK 500
; MCU:			ATMEGA16
; DESCRIPTION:	LAB PROJECT




.include "m16def.inc" 


.DEF COREA = R30							;CONTROL REGISTER A: [B1|B2|B3|B4|A1|Y1|Y2|   ]
.DEF COREB = R31							;CONTROL REGISTER B: [M1|M2|  |  |  |B5|  |   ]


.ORG 0x000
	JMP RESET 							; Reset Handler
.ORG 0x012
	JMP TIM0_OVF 						; Timer0 Overflow Handler

;*************
;*** RESET ***
;*************
.ORG 0x02A 
RESET: 
	LDI R16,HIGH(RAMEND) 				; Main program start
	OUT SPH,R16 						; Set stack pointer to top of RAM
	LDI R16,LOW(RAMEND)
	OUT SPL,R16
	
	LDI COREA, 0b00000000				; Initialize CONTROL REGISTER A
	LDI COREB, 0b00000000				; Initialize CONTROL REGISTER B

	LDI R16, 0b11111111					; Define PORTB -> OUTPUT
	OUT DDRB, R16						;
	OUT PORTB, R16	 					; TURN OFF LEDS

	LDI R16, 0b00000000					; Define PORTD -> INPUT
	OUT DDRD, R16						;
	LDI R16, 0b11111111					; Activate PULL UP Resistors
	OUT PORTD, R16						;
	
	LDI R16, 0b10000111					; ENABLE ADC CONVERTER, SET PRESCALING TO CLK/128 -> 125 kHZ
	OUT ADCSRA, R16
	
	LDI R16, 0b00011111					; ENABLE PULL UP RESISTORS OF PA0-PA4
	OUT PORTA, R16
	
	LDI R16, 0xFA						; Set COUNTER0 to 0xFA to FORCE interrupt
	OUT TCNT0, R16
	LDI R16, 0b00000001					; Enable TIM0_OVF Interrupt	
	IN R17, TIMSK
	OR R17, R16
	OUT TIMSK, R17
	LDI R16, 0b00000001					; Start COUNTER0, Normal Mode, Prescaler = clk/1024
	OUT TCCR0, R16
	
	SEI




;************
;*** MAIN ***
;************
MAIN:
CHECK_START_BUTTON:						; If(PIND:0 == 0) Then START Button 
	SBIC PIND, 0						; was pressed. Else wait until START Button
	JMP CHECK_START_BUTTON				; is pressed( PIND:0 = 0)

EXECUTION:
CHECK_STOP_BUTTON:						; If(PIND:7 == 0) Then STOP Button was 
	SBIS PIND, 7						; pressed => ALARM. Else continue execution
	JMP ALARM

CHECK_SILO0:							; If(COREA:3 == 0) Then Silo0 is EMPTY =>
	SBRS COREA, 3						; ALARM. Else Silo0 is not empty and continue
	JMP ALARM							; the execution

CHECK_Y1:								; If(PIND:1 == 0 && B1 == 0 && B3 == 0) Then
	SBIC PIND, 1						; 	SET Y1
	JMP CHECK_Y2						;	CLEAR Y2
	SBRC COREA, 7						;	TURN ON LED 5
	JMP CHECK_Y2						;   TURN OFF LED 3
	SBRC COREA, 5						; ELSE
	JMP CHECK_Y2						;	Continue Execution
SET_Y1:
	SBR COREA, 0b00000100
	CBR COREA, 0b00000010
	CBI PORTB, 5
	SBI PORTB, 3		

CHECK_Y2:								; If(PIND:2 == 0 && b2 == 1) Then Silo1 is FULL =>
	SBIC PIND, 2						;	change Y to Y2 position.
	JMP CHECK_M2						;	SET Y2
	SBRS COREA, 6						; 	CLEAR Y1
	JMP CHECK_M2						;	TURN ON LED 3
SET_Y2:									;	TURN OFF LED 5
	SBR COREA, 0b00000010				; ELSE
	CBR COREA, 0b00000100				;	Continue Execution
	CBI PORTB, 3
	SBI PORTB, 5

CHECK_M2:								; If( Y1 == 1 && ( B2 == 0 || B4 == 0) Then
	SBRS COREA, 2						; 	TURN ON M2
	JMP CHECK_M1						;	SET M2, TURN ON LED 4
	SBRS COREA, 6						; ELSE CONTINUE
	JMP SET_M2							;
	SBRC COREA, 4
	JMP CHECK_M1
SET_M2:
	SBRC COREB, 6
	JMP CHECK_M1
	CBI PORTB, 4
	SBR COREB, 0b01000000

CHECK_M1:								; If( M2 == 1) THEN
	SBRS COREB, 6						;	If( M1 == 0) Then
	JMP CHECK_FOR_ERRORS				;		SET M1
SET_M1:									;		TURN ON LED 6
	SBRC COREB, 7						;		WAIT 7 SECS
	JMP CHECK_FOR_ERRORS				;		SET B5
	CBI PORTB, 6						;		TURN ON LED2
	SBR COREB, 0b10000000
	CALL PAUSE
	SBR COREB, 0b00000100
	CBI PORTB, 2

CHECK_FOR_ERRORS:						; If( Q1 == 0 || Q2 == 0 || ( B2 == 1 && B4 == 1)
CHECK_Q1:								; Then ALARM
	SBIS PIND, 4
	JMP ALARM
CHECK_Q2:
	SBIS PIND, 5
	JMP ALARM
CHECK_SILO_FULL:
	SBRS COREA, 6
	JMP FINISH_EXECUTION
	SBRS COREA, 4
	JMP FINISH_EXECUTION
SILOS_FULL:
	JMP ALARM

FINISH_EXECUTION:
	JMP EXECUTION


;*************
;*** ALARM ***
;*************
ALARM:
	CLI
	LDI R16, 0b11111110					; TURN ON LED 0
	OUT PORTB, R16	
	

WAIT_ON_ACKNOWLEDGEMENT:

;8KHZ PUSLE, 50% DUTY CYCLE	
BUZZER:
	SBI PORTC, 0							;PC0 ON
	
	LDI R22, 0	
	LDI R21, 0	
FIRST_LOOP:	
	INC R22
	CPI R22, 255
	BRNE FIRST_LOOP
	
	LDI R22, 0
	
	INC R21
	CPI R21, 4
	BRNE FIRST_LOOP
	
	 
	
	CBI PORTC, 0							;PC0 OFF

	LDI R22, 0	
	LDI R21, 0	
SECOND_LOOP:	
	INC R22
	CPI R22, 255
	BRNE SECOND_LOOP
	
	LDI R22, 0
	
	INC R21
	CPI R21, 4
	BRNE SECOND_LOOP

END_BUZZER:
	SBIC PIND, 6
	JMP WAIT_ON_ACKNOWLEDGEMENT

END_ALARM:
	JMP RESET
	 
;*********************************
;*** TIMER0 OVERFLOW INTERRUPT ***
;*********************************
TIM0_OVF:
	IN R20, SREG								;SAVE STATUS REGISTER IN STACK
	PUSH R20	
	
READ_PA0:
	LDI R18, 0b11000000							;INTERNAL VREF 2.56 V. ADLAR = 0(RIGHT ADJUSTED)->READ ADCL, PA0
	OUT ADMUX, R18
	
	LDI R18, 0b11000111							;ENABLE ADC CONVERTER, START CONVERSION, SET PRESCALING TO CLK/128 -> 125 kHZ
	OUT ADCSRA, R18
PA0_CONVERSION:
	SBIC ADCSRA, 6								;IF ADCSRA:6(ADSC) IS CLEARED THEN THE CONVERSION HAS BEEN COMPLETED
	JMP PA0_CONVERSION

STORE_PA0:
	IN R19, ADCL								;ADLAR == 0 THEN IT IS RIGHT ADJUSTED

	CPI R19, 0x0F								;If(R19 > 0x0F) Then
	BRSH SET_A1									;	SET A1
CLEAR_A1:
	CBR COREA, 0b00001000
	JMP READ_PA1
SET_A1:
	SBR COREA, 0b00001000


READ_PA1:
	LDI R18, 0b11000001							;INTERNAL VREF 2.56 V. ADLAR = 0(RIGHT ADJUSTED)->READ ADCL, PA1
	OUT ADMUX, R18
	
	LDI R18, 0b11000111							;ENABLE ADC CONVERTER, START CONVERSION, SET PRESCALING TO CLK/128 -> 125 kHZ
	OUT ADCSRA, R18
PA1_CONVERSION:
	SBIC ADCSRA, 6								;IF ADCSRA:6(ADSC) IS CLEARED THEN THE CONVERSION HAS BEEN COMPLETED
	JMP PA1_CONVERSION

STORE_PA1:
	IN R19, ADCL								;ADLAR == 0 THEN IT IS RIGHT ADJUSTED

	CPI R19, 0x0F
	BRSH SET_B1
CLEAR_B1:
	CBR COREA, 0b10000000
	JMP READ_PA2
SET_B1:
	SBR COREA, 0b10000000


READ_PA2:
	LDI R18, 0b11000010							;INTERNAL VREF 2.56 V. ADLAR = 0(RIGHT ADJUSTED)->READ ADCL, PA2
	OUT ADMUX, R18
	
	LDI R18, 0b11000111							;ENABLE ADC CONVERTER, START CONVERSION, SET PRESCALING TO CLK/128 -> 125 kHZ
	OUT ADCSRA, R18
PA2_CONVERSION:
	SBIC ADCSRA, 6								;IF ADCSRA:6(ADSC) IS CLEARED THEN THE CONVERSION HAS BEEN COMPLETED
	JMP PA2_CONVERSION

STORE_PA2:
	IN R19, ADCL								;ADLAR == 0 THEN IT IS RIGHT ADJUSTED

	CPI R19, 0x0F
	BRSH SET_B2
CLEAR_B2:
	CBR COREA, 0b01000000
	JMP READ_PA3
SET_B2:
	SBR COREA, 0b01000000


READ_PA3:
	LDI R18, 0b11000011							;INTERNAL VREF 2.56 V. ADLAR = 0(RIGHT ADJUSTED)->READ ADCL, PA3
	OUT ADMUX, R18
	
	LDI R18, 0b11000111							;ENABLE ADC CONVERTER, START CONVERSION, SET PRESCALING TO CLK/128 -> 125 kHZ
	OUT ADCSRA, R18
PA3_CONVERSION:
	SBIC ADCSRA, 6								;IF ADCSRA:6(ADSC) IS CLEARED THEN THE CONVERSION HAS BEEN COMPLETED
	JMP PA3_CONVERSION

STORE_PA3:
	IN R19, ADCL								;ADLAR == 0 THEN IT IS RIGHT ADJUSTED

	CPI R19, 0x0F
	BRSH SET_B3
CLEAR_B3:
	CBR COREA, 0b00100000
	JMP READ_PA4
SET_B3:
	SBR COREA, 0b00100000


READ_PA4:
	LDI R18, 0b11000100							;INTERNAL VREF 2.56 V. ADLAR = 0(RIGHT ADJUSTED)->READ ADCL, PA4
	OUT ADMUX, R18
	
	LDI R18, 0b11000111							;ENABLE ADC CONVERTER, START CONVERSION, SET PRESCALING TO CLK/128 -> 125 kHZ
	OUT ADCSRA, R18
PA4_CONVERSION:
	SBIC ADCSRA, 6								;IF ADCSRA:6(ADSC) IS CLEARED THEN THE CONVERSION HAS BEEN COMPLETED
	JMP PA4_CONVERSION

STORE_PA4:
	IN R19, ADCL								;ADLAR == 0 THEN IT IS RIGHT ADJUSTED

	CPI R19, 0x0F								; If( R19 > 0x0F
	BRSH SET_B4
CLEAR_B4:
	CBR COREA, 0b00010000
	JMP END_OF_TIM0_OVF
SET_B4:
	SBR COREA, 0b00010000

END_OF_TIM0_OVF:
	POP R20
	OUT SREG, R20
	
	RETI

;*************
;*** PAUSE ***
;*************
PAUSE:
	; Delay 112 000 000 cycles
	; 7s at 16 MHz

    LDI  R23, 3
    LDI  R24, 57
    LDI  R25, 46
    LDI  R26, 13
L1: DEC  R26
    BRNE L1
    DEC R25
    BRNE L1
    DEC R24
    BRNE L1
    DEC  R23
    BRNE L1
    
	RET
